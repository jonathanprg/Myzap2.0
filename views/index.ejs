<!DOCTYPE html>
<html lang="pt-BR">
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="description" content="" />
        <meta name="author" content="apibrasil" />
        <meta name="generator" content="APIBrasil" />
        <title>MyZAP 2.0 - Example</title>

        <link href="https://getbootstrap.com/docs/5.2/dist/css/bootstrap.min.css" rel="stylesheet" />
        <style>
            html { zoom: 80%; }
        </style>

    </head>
    <body class="text-black">
        <div class="container p-4">

            <div class="text-center">
                <h1 class="pb-4">MYZAP 2.0</h1>
            </div>

            <form class="row" onsubmit="return false;">

                <div class="col-6">
                    <div class="card p-3">

                        <div class="card-body">

                            <div class="row">

                                <div class="col-12 mb-3">
                                    <input type="text" class="form-control" id="apitoken" name="apitoken" placeholder="Token da API" required>
                                </div>
    
                                <div class="col-6 mb-3">
                                    <input type="text" class="form-control" id="session" name="session" placeholder="Nome da sessão" required>
                                </div>
    
                                <div class="col-6 mb-3">
                                    <input type="text" class="form-control" id="sessionkey" id="sessionkey" placeholder="Senha da sessão" required>
                                </div>

                                <div class="col-12 mb-3">
                                    <label class="label float-start">Webhook Send Messages </label>
                                    <input type="text" class="form-control" id="wh_status" id="wh_status" placeholder="Webhooks dos status das mensagens enviadas" />
                                </div>
    
                                <div class="col-12 mb-3">
                                    <label class="label float-start">Webhook Received Messages</label>
                                    <input type="text" class="form-control" id="wh_message" id="wh_message" placeholder="Webhooks dos status das mensagens recebidas" />
                                </div>
                                
                                <div class="col-12 mb-3">
                                    <label class="label float-start">Webhook Status Connection</label>
                                    <input type="text" class="form-control" id="wh_connect" id="wh_connect" placeholder="Webhook dos status das sessões" />
                                </div>

                                <div class="col-12 mb-3">
                                    <label class="label float-start">Webhook QRCode</label>
                                    <input type="text" class="form-control" id="wh_qrcode" id="wh_qrcode" placeholder="Webhook do QRCODE da sessão" />
                                </div>
    
                            </div>
                            
                            <button type="button" class="btn btn-lg w-100 btn-success" id="send-btn" onclick="alterSession(document.getElementById('session').value)"> Conectar uma sessão </button>

                        </div>

                    </div>

                </div>

                <div class="col-6">
                    
                    <div class="card">
                        <div class="card-body text-center">
                            <img src="/qrcode.jpg" class="w-100" alt="" id="image" />
                        </div>
                    </div>

                </div>

            </form>

        </div>
    </body>

<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="//cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="//cdn.socket.io/4.4.0/socket.io.min.js"></script>

<script>

    let session;

    let host = '<%=host %>' //get value this .env
    let host_ssl = '<%=host_ssl %>' //get value this .env
    let port = '<%=port %>' //get value this .env

    const url = host != '' ? `${host}:${port}` : host_ssl
    
    async function getSession(session) {

        document.getElementById("image").src = "/loading.gif";

        const config = {
            headers: {
                apitoken: document.getElementById("apitoken").value,
                sessionkey: document.getElementById("sessionkey").value
            }
        }

        const data = {
            session: document.getElementById("session").value,
            wh_status: document.getElementById("wh_status").value,
            wh_message: document.getElementById("wh_message").value,
            wh_qrcode: document.getElementById("wh_qrcode").value,
            wh_connect: document.getElementById("wh_connect").value,
        }
        
        axios.post(url + "/start", data, config)
        .then(() => {

        })
        .catch((error) => {

            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: error?.message,
            })

            console.log(error)

        })

    }

    async function alterSession(session) {
        if (!session) {
            
             Swal.fire(
                'Error!!',
                'Digite o nome da sessão para começar...',
                'error'
            )
        
        } else if (!document.getElementById('apitoken').value) {

              Swal.fire(
                'Error!!',
                'Digite o TOKEN da API para começar...',
                'error'
            )

        } else if (!document.getElementById('sessionkey').value) {
            Swal.fire(
                'Error!!',
                'Digite a SESSION KEY da sessão para começar...',
                'error'
            )
        }
        else {
            document.getElementById('image').style.visibility = "visible";
            document.getElementById('send-btn').disabled = true
            await getSession(session)
        }
        
    }

    const socket = io(url + '/');

    socket.on('msg', (msg) => {
        if (msg) {

            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: msg.reason,
            })

            document.getElementById('image').src = "/error.png"

        }
    })

    socket.on('qrCode', (qrCode) => {

        let session = document.getElementById('session').value
        if (session === qrCode.session) {
            document.getElementById('image').src = qrCode.data
            document.getElementById('image').classList.remove("w-100");
            document.getElementById('image').classList.add("w-50");
        }

        document.getElementById('show-log').insertAdjacentHTML(session);

    })

    socket.on('whatsapp-status', (status) => {

        if (status) {

            Swal.fire(
                'Nice!',
                'Whatsapp Conectado com sucesso!',
                'success'
            )
            
            document.getElementById('send-btn').disabled = false
            document.getElementById('image').src = "/ok.png"
        }else {

            Swal.fire(
                'Error!!',
                'Erro ao conectar o WhatsApp, verifique o log da API.',
                'error'
            )
            
            document.getElementById('send-btn').disabled = false
            document.getElementById('image').src = "/error.png"
        }

        document.getElementById('show-log').insertAdjacentHTML(status);

    })

</script>
</html>
